* datapp
Your app as data.
** Goals
- provide the tools to make an app as data
- provide everything in between calling functions between a Clojure server and Clojurescript webapp
- as little as possible "template" code - the stuff that gets copy-pasted to get a project started
  - in a reasonable manner; it should still make sense and not be a macro monstrosity
  - with preference to having the stuff that does get copy-pasted very unlikely to change (eg. project settings)
** Motivation
This is meant to solve two problems for me.

First: I find myself, when making a quick new project for a hackathon or a quick prototype, copy-pasting a ton of code. This is quite annoying because now I have to maintain that code, and when I make improvements to it, I basically have to copy-paste it into all projects with a similar structure (if I'm still maintaining them). Why not factor our the reusable part of webapps?

Second: Decomplecting all of this stuff from business logic. This is separate logic, so it should be kept separate to make it easy to follow best practices.

It seems like there are other attempts to solve this problem, but they mostly involve templates (which solves neither problem, it just makes it easier to get started). Hopefully, it can help others who feel the same.
** Cool things
*** A server as just a handling function
By modelling the server as just a function without any of the complexity of routes, dispatch and everything else can be done with data with normal Clojure logic.
*** Decomplecting business logic from everything in the middle
Since the server is just a function, everything other than function can be pulled apart into a reusable library (this one) where hopefully best practices and other nice-to-haves come for free.
*** Decomplecting middleware and handlers
By pulling middleware and handlers apart, the global middleware normally present in a ring application doesn't have to exist, and different routes can have different tailored middleware independent of the functions used to finally handle the requests. In addition, those functions can be completely independent of either the ring request format or even the method of communication (the same handler could be used for websocket requests).
*** Decomplecting dependencies and components
When component dependencies are specified with ~component/using~, those dependencies are no longer readable or editable. By constructing dependency representation separate and the system of components separately, it's easier to add/remove/see dependencies.
*** Dependency exports
An annoying problem with component dependencies is that the entire component is passed in which requires knowledge of the internal state of the dependency to destructure which part we actually want, which is often not desired.

Because of that, a protocol is available for components to specify what it is their consumers should use.
** Alternatives / Other Relevant Libraries
*** [[https://github.com/danielsz/system][system]]
This was actually quite useful for looking at components to build. This looks like it would be a good library to depend on, but it isn't composable with components (eg. the server takes in a handler function, not another component).
** Troubleshooting
*** Websockets + Heroku
If websockets don't seem to work, try ~heroku labs:enable websockets~ before deploying
* TODOs / want-to-haves
- use request-deps in middleware
- how to handle prod/dev/etc configuration in a hard to screw up way
  - so that we can use macros to exclude unnecessary stuff in cljs
- cljs timer utils
- clj timer
  - https://github.com/overtone/at-at
- component pull-request with export lifecycle method
  - https://github.com/stuartsierra/component/blob/master/src/com/stuartsierra/component.clj
- add starter to this repo
- websocket component
  - https://github.com/seancorfield/om-sente/blob/master/src/clj/om_sente/server.clj
  - https://github.com/seancorfield/om-sente/blob/master/src/cljs/om_sente/core.cljs
  - https://github.com/danielsz/system/blob/master/src/system/components/sente.clj
- figwheel utils
  - https://github.com/bhauman/lein-figwheel
  - https://github.com/gadfly361/reagent-figwheel
    - [[https://github.com/gadfly361/reagent-figwheel/blob/master/src/leiningen/new/reagent_figwheel/user.clj][user.clj]]
      - contains figwheel starting code and browser repl code
    - [[https://github.com/gadfly361/reagent-figwheel/blob/master/src/leiningen/new/reagent_figwheel/user.cljs][user.cljs]]
      - contains browser repl and figwheel connecting
- lively for cljs auto-refresh
  - have option for this instead of figwheel
  - https://github.com/immoh/lively
- add repl server
  - [[https://github.com/danielsz/system/blob/master/src/system/components/repl_server.clj][link]]
- add script for finding request with exception
- try resources with in library?
  - to be used with generating from templates eg. cordova
- reagent / reagent utils
  - with nashorn + generating html serverside
  - https://github.com/pleasetrythisathome/om-server-rendering/blob/master/src/clj/framework/render.clj
  - https://github.com/pleasetrythisathome/om-server-rendering/blob/master/src/cljs/framework/core.cljs
- scss
- clj timer
- authentication
  - DIY with session
  - mongo session
  - friend
- cljs repl
- browser repl
- db modules
  - mongodb
  - datomic?
  - postgres
    - korma
    - [[https://github.com/alaisi/postgres.async][postgres.async]]
- cordova
  - APNS
  - GCM
  - make-updating-app
  - make-static-app
  - look into jquery mobile / ratchet / etc. for template
- node-webkit
- browser extension
- testing
- heroku/docker setup?
- make project work with cljx
  - https://github.com/Prismatic/schema/blob/master/project.clj
  - https://github.com/Prismatic/plumbing/blob/master/project.clj
- study
  - luminus
    - http://yogthos.net/#/blog/35-Luminus:+a+web+framework+for+Clojure
    - https://github.com/yogthos/luminus-template
    - http://www.luminusweb.net/
  - pedestal
    - https://github.com/pedestal/pedestal
    - http://teropa.info/blog/2013/10/18/single-page-webapps-in-clojurescript-with-pedestal.html
- break subcomponents into separate projects
- split out utils
- make starter a template
